$ docker start oracle12c


$ docker stop oracle12c
$ docker-machine stop


## member/urls.py #########################################
from django.urls import path
from . import views

urlpatterns = [
    path('index', views.index, name="index"),
    path('join', views.join, name="join"),
    path('login', views.login, name="login"),
    path('logout', views.logout, name="logout"),
    path('list', views.list, name="list"),
    path('edit', views.edit, name="edit"),
    path('delete', views.delete, name="delete"),
    path('join1', views.join1, name="join1"),

    path('auth_join', views.auth_join, name="auth_join"),
    path('auth_login', views.auth_login, name="auth_login"),
    path('auth_edit', views.auth_edit, name="auth_edit"),
    path('auth_pw', views.auth_pw, name="auth_pw"),
    path('auth_logout', views.auth_logout, name="auth_logout"),
    path('auth_index', views.auth_index, name="auth_index"),
]


## 파일명 : member/views.py
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.db import connection

cursor = connection.cursor()

#django에서 제공하는 User 모델
from django.contrib.auth.models import User
from django.contrib.auth import login as login1
from django.contrib.auth import logout as logout1
from django.contrib.auth import authenticate as auth1

def auth_join(request):
    if request.method == 'GET' :
        return render(request, 'member/auth_join.html') 
    elif request.method == 'POST':
        id = request.POST['username']
        pw = request.POST['password']
        na = request.POST['first_name']
        em = request.POST['email']
        # 회원가입
        obj = User.objects.create_user(
            username=id,
            password=pw,
            first_name=na,
            email=em)
        obj.save()
        return redirect("/member/auth_index")


def auth_index(request):
    if request.method == 'GET' :
        return render(request, 'member/auth_index.html')                 


def auth_login(request):
    if request.method == 'GET' :
        return render(request, 'member/auth_login.html') 
    elif request.method == 'POST':
        id = request.POST['username']
        pw = request.POST['password']

        # DB에 인증
        obj = auth1(request, 
            username=id, password=pw)
        if obj is not None:
            login1(request, obj) # 세션에 추가
            return redirect("/member/auth_index")
        return redirect("/member/auth_login")

def auth_logout(request):
    if request.method == 'GET' or request.method == 'POST':
        logout1(request) # 세션 초기화
        return redirect("/member/auth_index")

def auth_edit(request):
    if request.method == 'GET':
        if not request.user.is_authenticated:
            return redirect("/member/auth_login")
    
        obj = User.objects.get(username=request.user)
        return render(request, 'member/auth_edit.html'
            , {"obj":obj}) 
    
    elif request.method == 'POST':    
        id = request.POST['username']
        na = request.POST['first_name']
        em = request.POST['email']

        obj = User.objects.get(username=id)
        obj.first_name = na
        obj.email= em
        obj.save()
        return redirect("/member/auth_index")

def auth_pw(request):
    if request.method == 'GET':
        if not request.user.is_authenticated :
            return redirect("/member/auth_login")

        return render(request, 'member/auth_pw.html') 
    elif request.method == 'POST':
        pw = request.POST['pw']     #기존 암호
        pw1 = request.POST['pw1']    #바꿀 암호
        #바꾸기전에 인증
        obj = auth1(request, username=request.user,
            password=pw)
        if obj:
            obj.set_password(pw1)   #pw1으로 암호변경 
            obj.save()
            return redirect("/member/auth_index")    
        
        return redirect("/member/auth_pw")


###############################################

@csrf_exempt  
def delete(request):
    if request.method == 'GET' or request.method == 'POST':
        ar = [ request.session['userid'] ]
        sql = "DELETE FROM MEMBER WHERE ID=%s"
        cursor.execute(sql, ar) 

        #127.0.0.1:8000 /member/index
        return redirect("/member/logout")



@csrf_exempt  
def edit(request):
    if request.method == 'GET':
        ar = [ request.session['userid'] ]
        sql = """
            SELECT * FROM MEMBER WHERE ID=%s
        """
        cursor.execute(sql, ar) 
        data = cursor.fetchone()   
        print(data)

        return render(request, 'member/edit.html', {"one":data}) 
    elif request.method == 'POST':
        ar = [ 
            request.POST['name'],
            request.POST['age'],
            request.POST['id']     
        ]
        sql = """
            UPDATE MEMBER SET NAME=%s, AGE=%s 
            WHERE ID=%s
        """
        cursor.execute(sql, ar)

        return redirect("/member/index")


@csrf_exempt  #post로 값을 전달 받는 곳은 필수
def join1(request):
    if request.method == 'GET':
        return render(request, 'member/join1.html') 
        


def list(request):
    # ID기준으로 오름차순
    sql = "SELECT * FROM MEMBER ORDER BY ID ASC"
    cursor.execute(sql) # sql문 실행
    data = cursor.fetchall() # 결과값을 가져옴
    print(type(data)) #list
    print(data) #[(1,2,3,4,5), (   ), (   )]

    #list.html을 표시하기 전에
    #list변수에 data값을,  title변수에 "회원목록" 문자를
    return render(request, 'member/list.html', {"list":data, "title":"회원목록"})


def index(request):
    #return HttpResponse("index page <hr />")
    return render(request, 'member/index.html')


@csrf_exempt
def login(request):
    if request.method == 'GET':
        return render(request, 'member/login.html')    
    elif request.method == 'POST':    
        ar = [request.POST['id'], request.POST['pw']]
        sql = """
            SELECT ID, NAME FROM MEMBER 
            WHERE ID=%s AND PW=%s 
            """
        cursor.execute(sql, ar) 
        data = cursor.fetchone()   
        print(type(data))
        print(data) #('a','b')

        if data:
            request.session['userid'] = data[0]
            request.session['username'] = data[1]
            return redirect('/member/index')

        return redirect('/member/login')

@csrf_exempt
def logout(request):
    if request.method=='GET' or request.method=='POST':
        del request.session['userid']
        del request.session['username']
        return redirect('/member/index')


@csrf_exempt  #post로 값을 전달 받는 곳은 필수
def join(request):
    if request.method == 'GET':
        return render(request, 'member/join.html') 
    elif request.method == 'POST':
        id = request.POST['id'] # html에서 넘어오는 값 받기
        na = request.POST['name']
        ag = request.POST['age']
        pw = request.POST['pw']

        ar = [id, na, ag, pw] #list로 만듬
        print(ar)
        #DB에 추가함

        sql = """
            INSERT INTO MEMBER(ID, NAME, AGE, PW, JOINDATE) 
            VALUES (%s, %s, %s, %s, SYSDATE)
            """
        cursor.execute(sql, ar)

        #크롬에서 127.0.0.1:8000/member/index  엔터키를 자동화
        return redirect('/member/index')      


#파일명 : templates/member/auth_join.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <form action="/member/auth_join" method="post">
        {% csrf_token %}
        아이디 : <input type="text" name="username" /><br />
        암호 : <input type="password" name="password" /><br />
        이름 : <input type="text" name="first_name" /><br />
        이메일 : <input type="text" name="email" /><br />
        <input type="submit" value="회원가입" />
    </form>
</body>
</html>


#파일명 : templates/member/auth_index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    {% if not request.user.is_authenticated %}
        <a href="/member/auth_login">로그인</a>
        <a href="/member/auth_join">회원가입</a>
    {% else %}
        세션 사용자ID : {{request.user}}<br />
        세션 이름 정보 : {{request.user.first_name}}<br />
        세션 이메일 정보 :{{request.user.email}}<br />
        <a href="/member/auth_edit">정보수정</a>
        <a href="/member/auth_pw">비번변경</a>
        <a href="/member/auth_logout">로그아웃</a>
    {% endif %}
</body>
</html>


#파일명 : templates/member/auth_login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <form action="/member/auth_login" method="post">
        {% csrf_token %}
        아이디 : <input type="text" name="username" /><br />
        암호 : <input type="password" name="password" /><br />
        <input type="submit" value="로그인" />
    </form>
</body>
</html>

## templates/member/auth_edit.html ###
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <form action="/member/auth_edit" method="post">
        {% csrf_token %}
        아이디 : <input type="text" name="username" value="{{obj.username}}" readonly /><br />
        이름 : <input type="text" name="first_name" value="{{obj.first_name}}" /><br />
        이메일 : <input type="text" name="email" value="{{obj.email}}" /><br />
        <input type="submit" value="회원수정" />
    </form>
</body>
</html>


## templates/member/auth_pw.html ###
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <form action="/member/auth_pw" method="post">
        {% csrf_token %}
        기존암호 : <input type="password" name="pw" /><br />
        바꿀암호 : <input type="password" name="pw1" /><br />
        바꿀암호 : <input type="password" name="pw2" /><br />
        <input type="submit" value="암호변경" />
    </form>
</body>
</html>


def exam_insert(request):
    for i in range(20):
        obj = Table2()
        obj.name = '마바사'+i
        obj.kor = 80
        obj.eng = 60
        obj.math = 96
        obj.classroom = 104
        obj.save()
        
def exam_select(request):
    sum = Table2.objects.raw("SELECT  1 as no, SUM(math) smath FROM MEMBER_TABLE2")
    print(type(sum))
    print(sum.columns)
    print(sum[0].smath)
    
    # SELECT SUM(math) FROM MEMBER_TABLE2 WHERE CLASS_ROOM=101
    list = Table2.objects.aggregate(Sum('math'))

    # SELECT NO, NAME FROM MEMBER_TABLE2
    list = Table2.objects.all().values('no','name')

    # SELECT * FROM MEMBER_TABLE2 ORDER BY name ASC
    list = Table2.objects.all().order_by('name')
    #list = Table2.objects.raw("SELECT * FROM MEMBER_TABLE2 ORDER BY name ASC")

    # 반별 국어, 영어, 수학 합계
    # SELECT SUM(kor) AS kor, SUM(eng) AS eng, SUM(math) AS math FROM MEMBER_TABLE2 GROUP BY CLASSROOM
    list = Table2.objects.values('classroom').annotate(kor=Sum('kor'),eng=Sum('eng'),math=Sum('math'))   
    
    return render(request, 'member/exam_select.html',{"list":list}) 



## templates/member/exam_select.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <a href="/member/exam_select?no=1">반별</a>
    <table border="1">
        <tr>
            <th>이름</th>
            <th>국어</th>
            <th>영어</th>
            <th>수학</th>
            <th>강의실</th>
            <th></th>
        </tr>
        {% for row in list %}
        <tr>
            <td>{{row.name}}</td>
            <td>{{row.kor}}</td>
            <td>{{row.eng}}</td>
            <td>{{row.math}}</td>
            <td>{{row.classroom}}</td>
            <td>
                <a href="/member/exam_update?no={{row.no}}">수정</a>
                <a href="/member/exam_delete?no={{row.no}}">삭제</a>
            </td>
        </tr>
        {% endfor %}

    </table>
</body>
</html>

